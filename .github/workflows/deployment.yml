name: Thefans

on:
 push:
   branches: [ production ]

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: kirschbaumdevelopment/laravel-test-runner:8.0

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: 7k#&2-Dkf8wGSgp
          MYSQL_DATABASE: thefans
        ports:
          - 33306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - uses: actions/checkout@v2

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.ci.production.example', '.env');"

      - name: Install composer dependencies
        run: composer update --ignore-platform-reqs

      - name: Set required directory permissions
        run: chmod -R 777 storage bootstrap/cache

      - name: Run migration database and seeds
        run: |
          php artisan migrate
          php artisan db:seed

      - name: Run Test phpunit
        run: vendor/bin/phpunit

  build :
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - uses: actions/checkout@v2

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.production.example', '.env');"

      - name: Install NPM dependencies
        run: npm install

      - name: Minify CSS and JS files
        run: npm run build

      - name: Login
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}

      - name: Configure Docker
        run: gcloud auth configure-docker europe-central2-docker.pkg.dev --quiet

      - name: Build docker image
        run:  docker build -f Dockerfile-k8s -t 788908097958.dkr.ecr.eu-central-1.amazonaws.com/project-versions .


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1


      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push image to Amazon ECR
        run: docker push 788908097958.dkr.ecr.eu-central-1.amazonaws.com/project-versions:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:
      - uses: actions/checkout@v2

#      - name: Kubernet set content
#        uses: Azure/k8s-set-context@v1
#        with:
#          method: kubeconfig
#          kubeconfig: ${{ secrets.KUBE_CONFIG }}
#          context: arn:aws:eks:eu-central-1:788908097958:cluster/frankfurt
#        id: setcontext

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Update kube config
        run: aws eks update-kubeconfig --name frankfurt  --region eu-central-1

      - name: Deploy image to Amazon EKS
        run: |
          kubectl rollout restart deployment/backend
          kubectl rollout restart deployment/backend-cron
          kubectl rollout restart deployment/backend-queue
          kubectl rollout restart deployment/backend-websockets
